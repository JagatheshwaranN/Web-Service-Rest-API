Spring
======
Spring is a dependency injection framework.

Terminologies
=============
1. Bean
2. Autowired
3. Dependency Injection
4. Inversion Of Control
5. IOC container
6. Application Context [Example of IOC container]

https://github.com/in28minutes/spring-master-class/tree/master/01-spring-in-depth

Spring Framework Terms
======================
Modules
=======
Data Access / Integration
=========================
JDBC - Java Data Base Connection
ORM - Object Relation Mapping
OXM - Object XML Mapping
JMS - Java Messaging System

Web
===
WebSocket
Servlet
Web
Portlet

Cross Cutting Concerns
======================
We need to do the unit testing in Web / Service / Data layers.

AOP - Aspect Oriented Programming
Aspects

Spring Projects
===============
1. Spring Boot
2. Spring Cloud
3. Spring Data
4. Spring Integration
5. Sping Batch
6. Spring Security
7. Spring HATEOAS
8. Others.. [Spring Session, Spring Web Services]

Why Spring Popular
==================
1. Enables Testable Code
2. No Plumbing Code
3. Flexible Architecure
4. Staying Current

To Fix More Than One Bean Issue for runtime [Multiple Candidates avail for Autowiring]
===========================================
Here, we will have issue as we have 2 sorting algorithms defined. To fix the same, we have 
used @Primary annotation, so @Primary injected algorithm will be considered.
@Autowired
SortingAlgo sortingAlgo;

Alternate Way 1
The other way to fix the same is by using the explicit instance variable name of the algorithm. 
Note: We need to provide the exact name otherwise it will not work.
@Autowired
SortingAlgo bubbleSortAlgoImpl;

NOTE: Here, we can remove the @Primary annotation.

Alternate Way 2
The second approach is to use the @Qualifier annotation.
We have to add the annotation in the Bean class and also have to mention the same
before Autowired reference.
@Autowired
@Qualifier("quick")
SortingAlgo sortingAlgo;

Bean Scope
==========
Default - singleton
* When we request ApplicationContext for a Bean for 10 times. We will 
  get the same bean, which is Singleton.
singleton - One instance per Spring Context.
prototype - New bean whenever requested.
request - One bean per HTTP request.
session - One bean per HTTP session.

Prototype can be implemented using below code.
// @Scope("prototype") Not Recommended Type of Writing // It is used to generate the different instance of this class when requested from AC.
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class BinarySearchImpl {
}

Combo of Singleton and Prototype Scope
======================================
Let's have a scenario where we have Bean which has scope as Singleton. And the dependency of it
has the scope as Prototype.
When we excute the below code,
ApplicationContext context = SpringApplication.run(SpingScopeApplication.class, args);
UserDAO userDAO1 = context.getBean(UserDAO.class);
UserDAO userDAO2 = context.getBean(UserDAO.class);
System.out.println(userDAO1); // UserDAO@68105edc
System.out.println(userDAO1.getJdbcConnection()); // JDBCConnection@66eb985d
System.out.println(userDAO2); // UserDAO@68105edc
System.out.println(userDAO2.getJdbcConnection()); // JDBCConnection@66eb985d

Here, though the Dependency has Prototype scope, it has same object. The reason is its parent bean,
which has Singleton pattern.

To have it work, we have to update the dependency class file as below.
@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class JDBCConnection {}

We have to use proxyMode = ScopedProxyMode.TARGET_CLASS attribute to have the different objects on each
invocation of class JDBCConnection.

ComponentScan
=============
By default, the Spring take the package during project creation as the scan area. If you create any package
outside the default area, it will not scan and throws NoBeanFoundException.

To fix this, we have to explicitly mention the ComponentScan for the package created.
@ComponentScan("componentscan")
public class SpingComponentScanApplication {}

Bean LifeCycle
==============
We can execute set of code after creating a bean and before destroying a bean.
postConstruct and preDestroy methods are available to do so.
NOTE: This will work for bean with Singleton scope.

Inside Bean class, you can add below code.

@PostConstruct
public void postConstruct() {
	logger.info("Method - Post Construct");
}

@PreDestroy
public void preDestroy() {
	logger.info("Method - Pre Destroy");
}

Context & Dependency Injection [Interface which has set of RULES and Spring has implemented it.]
==============================
1. Java EE Dependency Injection Standard (JSR-330)
2. Spring supports most annotations.
	a. @Inject(@Autowired)
	b. @Named(@Component & @Qualifier)
	c. @Singleton (Defines a scope of Singleton)

SpringBoot -> Spring
====================
We can switch from Spirngboot configurations to Spring.
1. Update POM.xml file with respective dependencies.
2. Goto ApplicationContext file and update configurations.
	1. @Configuration, @ComponentScan
	2. AnnotationConfigApplicationContext object created by using the ApplicationContext.

// @SpringBootApplication
@Configuration
@ComponentScan("componentscan")
public class SpingComponentScanApplication {

	private static Logger LOGGER = LoggerFactory.getLogger(SpingComponentScanApplication.class);

	@SuppressWarnings("resource")
	public static void main(String[] args) {

		ApplicationContext context = new AnnotationConfigApplicationContext(SpingComponentScanApplication.class);
		ComponentUserDAO userDAO1 = context.getBean(ComponentUserDAO.class);
		ComponentUserDAO userDAO2 = context.getBean(ComponentUserDAO.class);
		LOGGER.info("{}", userDAO1);
		LOGGER.info("{}", userDAO1.getJdbcConnection());
		LOGGER.info("{}", userDAO2);
		LOGGER.info("{}", userDAO2.getJdbcConnection());
	}
}

To fix the warning of context not closed. The ApplicationContext is updated as AnnotationConfigApplicationContext and 
added inside the Try-with-Resources.

Next step is to create applicationContext.xml under main/resources

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="https://www.springframework.org/schema/beans"
	xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="https://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">
	<bean id="xmlJdbcConnection"
		class="com.learn_everyday.spring_basics.xml.XmlJdbcConnection">
	</bean>
	<bean id="xmlUserDAO"
		class="com.learn_everyday.spring_basics.xml.XmlUserDAO">
		<property name="xmlJdbcConnection" ref="xmlJdbcConnection" />
	</bean>
</beans>

NOTE: 
1. Xml has showing error, but the project works fine. I believe its known issue.
2. We don't need any annotations as its linked via xml file.

Next step is to create the ApplicationContext run file as below and execute the code.

package com.learn_everyday.spring_basics;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.learn_everyday.spring_basics.xml.XmlUserDAO;

public class SpingXmlConfigApplication {

	private static Logger LOGGER = LoggerFactory.getLogger(SpingXmlConfigApplication.class);

	public static void main(String[] args) {

		try (ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml")) {
			XmlUserDAO userDAO1 = context.getBean(XmlUserDAO.class);
			LOGGER.info("{}", userDAO1);
			LOGGER.info("{}", userDAO1.getXmlJdbcConnection());
		}
	}
}

To get the list of beans loaded
===============================
LOGGER.info("Beans Loaded -> {}", (Object)context.getBeanDefinitionNames());

To load all the beans available in different packages. We can use ComponentScan.
And its not matter whether we are using annotation or xml configurations.

To use ComponentScan from XML, we need to update the applicationContext.xml file 
for context.

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
  
    <context:component-scan base-package="com.learn_everyday.spring_basics" />

IOC Container vs ApplicationContext vs BeanFactory
==================================================
When the controller of creating the instance of dependent bean is moved from Controller.
It is called as IOC. IOC can be implemented using the @Component and @Autowired annotations.

In Spring, there are 2 instance of IOC Container.
1. ApplicationContext
2. BeanFactory

BeanFactory provides basic management for beans and wiring of the dependencies.

ApplicationContext
==================
1. BeanFactory++..
2. Spring's AOP features.
3. i18n capabilities
4. WebApplicationContext for web applications, etc.

Spring suggests to use the ApplicationContext in 99% scenarios and when we
have less memory system or requirement then we can use BeanFactory.

Component Annotations
=====================
@Component - Generic Component
@Repository - Encapsulating storage, retrieval, and search behavior typically from
a relational DB.
@Service - Business Service Facade.
@Controller - Controller in MVC pattern.

Why we need to use @Repository/@Service/@Controller when we have @Component.
The reason is the above specific annotations provides some functionalities with respect
to their layer of usage. If we don't mention them specifically using those annotation
then we can't avail those benefits.

Read data from External Property File
=====================================
We need 2 things. One is @Value annotation and another is @PropertySource annotation.
We have to apply the @Value on the equivalent variable declared on bean for the value we
have in external property file.
We need @PropertySource to load the property file and it can be done before ApplicationContext
initialization.

@SpringBootApplication
@PropertySource("classpath:app.properties")
public class SpingBasicsApplication {

	public static void main(String[] args) {

		ApplicationContext context = SpringApplication.run(SpingBasicsApplication.class, args);
		ExternalFile externalFile = context.getBean(ExternalFile.class);
		System.out.println(externalFile.retrieveUrl());
	}

}

	@Value("${external.service.url}")
	private String url;

	public String retrieveUrl() {
		return url;
	}

Mockito
========
1. Great unit tests -> Easier Maintenance.
2. Writing great unit tests is NOT easy.
	a. Application have multiple layers.
		1. Each class has multiple dependencies.
3. How do you write the unit tests for classes with multiple dependencies?
	a. Option1: Stubs
	b. Option2: Mocks
		1. Advantages of Mocks
			a. Simpler to Write
			b. Easier to Maintain
			
Sample Mockito Test
===================
	@Test
	void findtheGreatestValueTest() {
		DataService dataServiceMock = mock(DataService.class);
		when(dataServiceMock.retrieveAllData()).thenReturn(new int[] {4, 7, 9, 2, 3});
		BusinessImpl businessImpl = new BusinessImpl(dataServiceMock);
		int result = businessImpl.findtheGreatestValue();
		System.out.println(result);
		assertEquals(9, result);
	}

Simplified Version
==================
@ExtendWith(MockitoExtension.class)
class BusinessImplSimplifiedMockTest {
	
	@Mock
	private DataService dataService;
	
	@InjectMocks
	private BusinessImpl businessImpl;

	@Test
	void findtheGreatestValueTest() {
		when(dataService.retrieveAllData()).thenReturn(new int[] {4, 7, 9, 2, 3});
		int result = businessImpl.findtheGreatestValue();
		System.out.println(result);
		assertEquals(9, result);
	}
}

Unit Test Writing
=================
Using Junit
===========
1. To write the unit test, we need the @ContextConfiguration and @RunWith annotations, to load
the Context(For which unit test is written)
2. Then we need to get the bean, for that we need to use @Autowired dependency.

@RunWith(SpringRunner.class)
@ContextConfiguration(classes = SpingExternalPropertyApplication.class)
public class BinarySearchTest {

	// Get the BEAN from the context
	@Autowired
	BinarySearchImpl binarySearchImpl;

	@Test
	public void testBasicScenario() {
		// Call a method on Binary Search
		int result = binarySearchImpl.binarySearch(new int[] {}, 5);
		// Check the value is correct
		assertEquals(3, result);
	}
}

We can also load the XML context using the applicationContext.xml file.
Also, we can override the applicationContext.xml data with testContext.xml file
by declaring it inside src/test/resources folder.

@RunWith(SpringRunner.class)
@ContextConfiguration(locations = "/applicationContext.xml")
public class BinarySearchXmlConfigurationTest {

	// Get the BEAN from the context
	@Autowired
	BinarySearchImpl binarySearchImpl;

	@Test
	public void testBasicXmlScenario() {
		// Call a method on Binary Search
		int result = binarySearchImpl.binarySearch(new int[] {}, 5);
		// Check the value is correct
		assertEquals(3, result);
	}
}

@RunWith(SpringRunner.class)
@ContextConfiguration(locations = "/testContext.xml")
public class BinarySearchTestContextXmlTest {

	// Get the BEAN from the context
	@Autowired
	BinarySearchImpl binarySearchImpl;

	@Test
	public void testBasicXmlScenario() {
		// Call a method on Binary Search
		int result = binarySearchImpl.binarySearch(new int[] {}, 5);
		// Check the value is correct
		assertEquals(3, result);
	}
}

Spring AOP [Aspect Oriented Programming]
==========
Use of CommandLineRunner interface. It used to run the SpringbootApplication class.
It is an alternative for ConfigurableApplicationContext. We use the overrided
run method.

@SpringBootApplication
public class LearnAopApplication implements CommandLineRunner {
	
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Autowired
	Business1 business1;
	
	public static void main(String[] args) {
		SpringApplication.run(LearnAopApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {
		logger.info(business1.processData());
	}
}

Intercept Business Methods
==========================
Here we are using the @Before annotation to intercept the business logic. Here, before
the actual business logic is called, the below method is being intercepted.

We need to use the @Before annotation as below. execution attribute is used to mention
the path of the business package which we need to intercept.

@Aspect
@Configuration
public class UserAccessAspect {
	
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Before("execution(* com.learn_everyday.learn_aop.learn_aop.business.*.*(..))")
	public void beforeAspect(JoinPoint joinpoint) {
		logger.info("Check for User Access");
		logger.info("Allow execution for {}", joinpoint);
	}
}

After Methods
=============
Similar to Before Methods, we have After Methods.

@Aspect
@Configuration
public class UserAccessAfterAspect {
	
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	// PointCut
	@AfterReturning(value = "execution(* com.learn_everyday.learn_aop.learn_aop.business.*.*(..))", returning = "result")
	public void afterAspectReturning(JoinPoint joinpoint, Object result) {
		// Advice
		logger.info("{} returned with value {}", joinpoint, result);
	}
	
	@AfterThrowing(value = "execution(* com.learn_everyday.learn_aop.learn_aop.business.*.*(..))", throwing = "exception")
	public void afterAspectThrowing(JoinPoint joinpoint, Throwable exception) {
		// Advice
		logger.info("{} returned with exception {}", joinpoint, exception);
	}
	
	@After(value = "execution(* com.learn_everyday.learn_aop.learn_aop.business.*.*(..))")
	public void afterAspect(JoinPoint joinpoint) {
		// Advice
		logger.info("After execution of {}", joinpoint);
	}
}

Around Method
=============
Similar to Before and After, we have Around method which is used around the interception.

@Aspect
@Configuration
public class AroundAspect {
	
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	// PointCut
	@Around("execution(* com.learn_everyday.learn_aop.learn_aop.business.*.*(..))")
	public void beforeAspect(ProceedingJoinPoint joinpoint) throws Throwable {
		// Advice
		long statTime = System.currentTimeMillis();
		joinpoint.proceed();
		long timeTaken = System.currentTimeMillis() - statTime;
		logger.info("Time taken by {} is {}", joinpoint, timeTaken);
	}

}

CommonJoinPointConfig
=====================
Instead of declaring same Pointcut in multiple classes repeatedly, we can create a common
JoinPoint using @Pointcut annotation and we can reuse it all classes.

public class CommonJointPointConfiguration {

	@Pointcut("execution(* com.learn_everyday.learn_aop.learn_aop.data.*.*(..))")
	public void dataLayerExecution() {}
	
	@Pointcut("execution(* com.learn_everyday.learn_aop.learn_aop.business.*.*(..))")
	public void businessLayerExecution() {}
}


Other different forms of JoinPoint configurations
=================================================
@Pointcut("bean(dao*)")
public void beanStartingWithDao(){
}
	
@Pointcut("bean(*dao*)")
public void beanContainingWithDao(){
}
	
@Pointcut("within(com.learn_everyday.learn_aop.learn_aop.data..*)")
public void dataLayerExecutionWithWithin(){	
}

Custom Annotation Creation
==========================
package com.learn_everyday.learn_aop.learn_aop.aspect;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface TrackTime {

}

The above code is used to create the custom annotation. After creating this code, we can
use the @TrackTime annotation in methods to get the execution time of methods.

We have declare the JoinPoint configuration as below.
@Pointcut("@annotation(com.learn_everyday.learn_aop.learn_aop.aspect.TrackTime)")
public void trackTimeAnnotation() {
}
	
And we need to change the AroundAspect class to use the above config.
	
Aspect
======
It is a combination of PointCut(Execution) and Advice.
The process of implementing AOP around your method is called as Weaving.
The framework which implements it, is called as Weaver.
=================================================================================

Firs Web Application
====================
Create a maven project with simple arch type and select package type as war.

Updated the POM.xml file with below dependencies and plugins.
=============================================================
<artifactId>jakarta.jakartaee-web-api</artifactId>

<artifactId>jakarta.servlet-api</artifactId>

<plugin>
<groupId>org.codehaus.cargo</groupId>
<artifactId>cargo-maven3-plugin</artifactId>
<version>1.10.18</version>
<configuration>
<container>
<containerId>tomcat10x</containerId>
<type>embedded</type>
</container>
<deployables>
<deployable>
<type>war</type>
<location>
${project.build.directory}/${project.build.finalName}.war</location>
<properties>
<context>/</context>
</properties>
</deployable>
</deployables>
</configuration>
</plugin>

=================================================================================
Web.xml
=======
<welcome-file> - It is a simple redirection file. That is, when someone hits
localhost:8080, it will redirect to login.do file.
It is easy to write the dynamic HTML content in JSP instead of Servlet.
Under WEB-INF folder, create a sub foder views and create a file named login.jsp
Provide the title and body content.

Then, move back to LoginServlet class and update the doGet() method to return jsp
instead of servlet.

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
		request.getRequestDispatcher("/WEB-INF/views/login.jsp").forward(request, response);
		
	}

Passing Request Parameters using Get Method
===========================================
In LoginServlet class, doGet Method
===================================
String name = request.getParameter("name");
request.setAttribute("name", name);

In jsp file, we can access the name attribute using expression language / syntax.
${name}

JSP - Scriplets [NOT RECOMMENDED]
=================================
In JSP, we can write the Java code inside the <% %>. They are called as Scriptlets.
We can import java libraries (imports) using scriptlets.
Scriptlets are not recommended to use in JSP's. For learning purpose only demoed.

Example
=======
<%@page import="java.util.Date"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Login JSP</title>
</head>
<body>
My First JSP ${name}
<%
System.out.println("Java From JSP");
Date date = new Date();
%>
<div>Current Date is <%=date%></div>
</body>
</html>

Disadvantage of Get Parameter
=============================
We should not use Get Parameter to pass the Password. Because, when the 
request goes over the network, it will pass through many routers, and intermediate
servers. With the use of GET parameters, anyone can view the password sent in the
request URL.

We can use the form and POST request to send the password.

Next Steps
==========
1. Create a form inside a JSP file. Set the method as POST otherwise the request will be
treated as GET.
2. Create a input username field and submit button.
3. When we ran the code, JSP will show input field, enter the name and click on login
button, you will get 405 status as the login.do servlet don't have the doPost method to
handle post method / request.
4. We have to create a doPost method in LoginServlet and it will handle the post method.
5. Added a password feild to the login.jsp file to enter the password.
6. Created UserValidationService class to verify the user is valid or not. For now, its
hardcoded.
7. Updated the doPost() method in LoginServlet to use the uservalidation method and based
on the response, the view file will be displayed.

Spring MVC
==========
1. Lets do a little bit of revamping
2. We need Sprig MVC framework and its dependencies
3. Spring MVC uses Front Controller Pattern -> Dispatcher Servlet
	a. Add Dispatcher Servlet to web.xml
4. DispatcherServlet needs an Spring Application Context to launch.
	a. We will create an xml(/WEB-INF/todo-servlet.xml)

Work flow
=========
1. Whenever any request comes in, it will reach DispatcherServlet as POC.
2. In DispatcherServlet, we have provided the url pattern as spring-mvc
so whatever request comes with this URL is served by DispatcherServlet.
3. Now, we have sent the /login with url pattern and DispatcherServlet
knows where the /login is defined in the code and it redirect the request
to the Controller who handles /login calls.

Now, we have created a package spring_mvc and LoginController class. The 
class has GetRequest Mapping URL ("/login"). It returns simple message.

================================================
sping-mvc
DispatcherServlet -> Front Controller

/login -> LoginController (Handler)
Welcome to Spring MVC

View Resolver
login -> /WEB-INF/views/login.jsp

login.jsp -> View
================================================
