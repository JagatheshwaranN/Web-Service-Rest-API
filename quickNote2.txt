Spring
======
Spring is a dependency injection framework.

Terminologies
=============
1. Bean
2. Autowired
3. Dependency Injection
4. Inversion Of Control
5. IOC container
6. Application Context [Example of IOC container]

https://github.com/in28minutes/spring-master-class/tree/master/01-spring-in-depth

Spring Framework Terms
======================
Modules
=======
Data Access / Integration
=========================
JDBC - Java Data Base Connection
ORM - Object Relation Mapping
OXM - Object XML Mapping
JMS - Java Messaging System

Web
===
WebSocket
Servlet
Web
Portlet

Cross Cutting Concerns
======================
We need to do the unit testing in Web / Service / Data layers.

AOP - Aspect Oriented Programming
Aspects

Spring Projects
===============
1. Spring Boot
2. Spring Cloud
3. Spring Data
4. Spring Integration
5. Sping Batch
6. Spring Security
7. Spring HATEOAS
8. Others.. [Spring Session, Spring Web Services]

Why Spring Popular
==================
1. Enables Testable Code
2. No Plumbing Code
3. Flexible Architecure
4. Staying Current

To Fix More Than One Bean Issue for runtime [Multiple Candidates avail for Autowiring]
===========================================
Here, we will have issue as we have 2 sorting algorithms defined. To fix the same, we have 
used @Primary annotation, so @Primary injected algorithm will be considered.
@Autowired
SortingAlgo sortingAlgo;

Alternate Way 1
The other way to fix the same is by using the explicit instance variable name of the algorithm. 
Note: We need to provide the exact name otherwise it will not work.
@Autowired
SortingAlgo bubbleSortAlgoImpl;

NOTE: Here, we can remove the @Primary annotation.

Alternate Way 2
The second approach is to use the @Qualifier annotation.
We have to add the annotation in the Bean class and also have to mention the same
before Autowired reference.
@Autowired
@Qualifier("quick")
SortingAlgo sortingAlgo;

Bean Scope
==========
Default - singleton
* When we request ApplicationContext for a Bean for 10 times. We will 
  get the same bean, which is Singleton.
singleton - One instance per Spring Context.
prototype - New bean whenever requested.
request - One bean per HTTP request.
session - One bean per HTTP session.

Prototype can be implemented using below code.
// @Scope("prototype") Not Recommended Type of Writing // It is used to generate the different instance of this class when requested from AC.
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class BinarySearchImpl {
}

Combo of Singleton and Prototype Scope
======================================
Let's have a scenario where we have Bean which has scope as Singleton. And the dependency of it
has the scope as Prototype.
When we excute the below code,
ApplicationContext context = SpringApplication.run(SpingScopeApplication.class, args);
UserDAO userDAO1 = context.getBean(UserDAO.class);
UserDAO userDAO2 = context.getBean(UserDAO.class);
System.out.println(userDAO1); // UserDAO@68105edc
System.out.println(userDAO1.getJdbcConnection()); // JDBCConnection@66eb985d
System.out.println(userDAO2); // UserDAO@68105edc
System.out.println(userDAO2.getJdbcConnection()); // JDBCConnection@66eb985d

Here, though the Dependency has Prototype scope, it has same object. The reason is its parent bean,
which has Singleton pattern.

To have it work, we have to update the dependency class file as below.
@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class JDBCConnection {}

We have to use proxyMode = ScopedProxyMode.TARGET_CLASS attribute to have the different objects on each
invocation of class JDBCConnection.

ComponentScan
=============
By default, the Spring take the package during project creation as the scan area. If you create any package
outside the default area, it will not scan and throws NoBeanFoundException.

To fix this, we have to explicitly mention the ComponentScan for the package created.
@ComponentScan("componentscan")
public class SpingComponentScanApplication {}

Bean LifeCycle
==============
We can execute set of code after creating a bean and before destroying a bean.
postConstruct and preDestroy methods are available to do so.
NOTE: This will work for bean with Singleton scope.

Inside Bean class, you can add below code.

@PostConstruct
public void postConstruct() {
	logger.info("Method - Post Construct");
}

@PreDestroy
public void preDestroy() {
	logger.info("Method - Pre Destroy");
}

Context & Dependency Injection [Interface which has set of RULES and Spring has implemented it.]
==============================
1. Java EE Dependency Injection Standard (JSR-330)
2. Spring supports most annotations.
	a. @Inject(@Autowired)
	b. @Named(@Component & @Qualifier)
	c. @Singleton (Defines a scope of Singleton)

SpringBoot -> Spring
====================
We can switch from Spirngboot configurations to Spring.
1. Update POM.xml file with respective dependencies.
2. Goto ApplicationContext file and update configurations.
	1. @Configuration, @ComponentScan
	2. AnnotationConfigApplicationContext object created by using the ApplicationContext Class.

// @SpringBootApplication
@Configuration
@ComponentScan("componentscan")
public class SpingComponentScanApplication {

	private static Logger LOGGER = LoggerFactory.getLogger(SpingComponentScanApplication.class);

	@SuppressWarnings("resource")
	public static void main(String[] args) {

		ApplicationContext context = new AnnotationConfigApplicationContext(SpingComponentScanApplication.class);
		ComponentUserDAO userDAO1 = context.getBean(ComponentUserDAO.class);
		ComponentUserDAO userDAO2 = context.getBean(ComponentUserDAO.class);
		LOGGER.info("{}", userDAO1);
		LOGGER.info("{}", userDAO1.getJdbcConnection());
		LOGGER.info("{}", userDAO2);
		LOGGER.info("{}", userDAO2.getJdbcConnection());
	}
}